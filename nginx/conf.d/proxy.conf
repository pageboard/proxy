lua_package_path './rocks/share/lua/5.1/?.lua;/usr/share/lua/5.1/?.lua;';
lua_package_cpath './rocks/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;';

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 10m;
# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OCSP stapling to function.
resolver 127.0.0.53 ipv6=off;

geo $local_proxies {
  default 0;
  127.0.0.1 1;
  ::1 1;
}

map "$local_proxies" $limit_ip {
  default $binary_remote_addr;
  ~1 "";
}
map "$local_proxies" $limit_host {
  default $host;
  ~1 "";
}

limit_req_zone $limit_ip zone=perip:10m rate=5r/s;
limit_req_zone $limit_host zone=perhost:10m rate=20r/s;
limit_req_zone $limit_host zone=readers:10m rate=15000r/s;
limit_req_status 429;

# configured upstreams
lua_shared_dict pageboard_domains 8192k;
lua_shared_dict pageboard_settings 64k;

log_format upstream escape=none '$status $request - [$time_local]\n$http_host\n'
  'REFERER: $http_referer\n'
  'USER-AGENT: $http_user_agent\n'
  'JWT: $req_jwt\n'
  'BODY:\n$req_body\n';

map $status $upstream_error {
  ~^(500|502|504)$  1;
  default 0;
}

# Initial setup tasks.
init_by_lua_block {
  upcache = require "upcache"
  auto_ssl = (require "resty.auto-ssl").new()
  lfs = require "lfs"
  local configFile = io.open(os.getenv("HOME") .. "/.config/pageboard/config.toml")
  local conf = (require "toml").parse(configFile:read("*a"))
  configFile:close()

  local rootDomains = conf.domains
  if rootDomains == nil then
    ngx.log(ngx.ERR, "Missing domains")
  end
  local rootPems = {}
  for i, rootDomain in ipairs(rootDomains) do
    local certPath = "./nginx/ssl/cert/" .. rootDomain
    local rootPem = (require "read-pem").init(certPath)
    if rootPem == nil then
      ngx.log(ngx.ERR, "Missing certificate for: " .. rootDomain)
    else
      rootPems[rootDomain] = rootPem
    end
  end

  local version = conf.upstream
  local peer = conf.upstreams[version]

  ngx.log(ngx.WARN, "connecting to upstream: ", peer)

  if peer == nil then
    ngx.log(ngx.ERR, "Missing upstream peer")
  else
    ngx.log(ngx.WARN, "Using default peer @", version, ": ", peer)
  end

  ngx.shared.pageboard_settings:set('peer', peer)
  ngx.shared.pageboard_settings:set('status', 'start')

  auto_ssl:set("hook_server_port", 17099)
  auto_ssl:set("dir", lfs.currentdir() .. "/autossl")
  if rootDomains[1] == "localhost.localdomain" then
    ngx.log(ngx.WARN, "Main root domain is localhost.localdomain:")
    ngx.log(ngx.WARN, "- clean your browser with chrome://net-internals/#hsts")
    ngx.log(ngx.WARN, "- switching to staging ACME CA")
    auto_ssl:set("ocsp_stapling_error_level", ngx.INFO)
    auto_ssl:set("ca", "https://acme-staging.api.letsencrypt.org/directory")
  else
    auto_ssl:set("ocsp_stapling_error_level", ngx.WARN)
  end

  auto_ssl:set("request_domain", function(ssl)
    local domain, err = ssl.server_name()
    if not err and domain ~= nil then
      for rootDomain, rootPem in pairs(rootPems) do
        if domain:sub(-rootDomain:len()) == rootDomain then
          ngx.shared.auto_ssl:set("domain:fullchain_der:" .. domain, rootPem.full)
          ngx.shared.auto_ssl:set("domain:privkey_der:" .. domain, rootPem.key)
        end
      end
    end
    return domain, err
  end)

  -- Define a function to determine which SNI domains to automatically handle
  -- and register new certificates for. Defaults to not allowing any domains,
  -- so this must be configured.
  auto_ssl:set("allow_domain", function(domain, autossl, ssl_options)
    -- never consider empty domain or a domain that is actually an IP
    if domain == nil or domain == "" or domain:match("%d+%.%d+%.%d+%.%d+") or domain:find(":", 1, true) then
      ngx.log(ngx.ERR, "allow_domain rejects: " .. domain)
      return false
    elseif ngx.shared.pageboard_domains:get(domain) ~= nil then
      return true
    else
      return false
    end
  end)

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
  if ngx.worker.id() ~= 0 then
    return
  end

  local http = require "resty.http"
  local json = require "cjson.safe"
  local domains = ngx.shared.pageboard_domains
  local settings = ngx.shared.pageboard_settings
  local peer = settings:get('peer')
  local function pageboardSync()
    local httpc = http.new()
    local url = "http://" .. peer .. "/.well-known/pageboard"
    local res, resErr = httpc:request_uri(url, {
      method = "GET"
    })
    local delay = 20
    settings:set('status', 'waiting')
    upcache.disabled = true
    domains:flush_all()
    if resErr ~= nil then
      ngx.log(ngx.ERR, "while connecting to ", peer)
      delay = 1
    elseif res.status ~= 200 then
      ngx.log(ngx.ERR, res.status, " ", url)
      delay = 3
    else
      local body = json.decode(res.body)
      for key, val in pairs(body.domains) do
        domains:set(key, val)
      end
      upcache.disabled = false
      settings:set('status', 'ready')
    end
    local ok, err = ngx.timer.at(delay, pageboardSync)
    if not ok then
      ngx.log(ngx.ERR, "failed to create the timer: ", err)
    end
  end

  local ok, err = ngx.timer.at(0, pageboardSync)
  if not ok then
    ngx.log(ngx.ERR, "failed to create the timer: ", err)
  end
}

# Internal server running on port 8999 for handling certificate tasks.
server {
  listen 127.0.0.1:17099;

  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}


