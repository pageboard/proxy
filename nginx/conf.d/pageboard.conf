lua_package_path './rocks/share/lua/5.1/?.lua;';

lua_shared_dict prometheus_metrics 128k;

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 10m;
# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OCSP stapling to function.
#
# This example uses Google's DNS server. You may want to use your system's
# default DNS servers, which can be found in /etc/resolv.conf. If your network
# is not IPv6 compatible, you may wish to disable IPv6 results by using the
# "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
resolver 127.0.0.1 ipv6=off;

# reasonable limits
limit_req_zone $binary_remote_addr zone=ratePerIP:10m rate=1r/s;
limit_req_zone $host zone=ratePerHost:10m rate=100r/s;
limit_req_status 429;

# configured upstreams
lua_shared_dict upstreams 128k;

# Initial setup tasks.
init_by_lua_block {
  upcache = require "upcache"
  auto_ssl = (require "resty.auto-ssl").new()

  local wildcards = (require "wildcards").init("./nginx/ssl/cert/")

  local devel = false
  if wildcards["localhost.localdomain"] ~= nil then
    devel = true
    ngx.log(ngx.WARN, "Using localhost.localdomain, clean with chrome://net-internals/#hsts")
  end

  auto_ssl:set("ocsp_stapling_error_level", ngx.WARN)

  auto_ssl:set("hook_server_port", 17099)
  auto_ssl:set("dir", (require "lfs").currentdir() .. "/autossl")
  if devel then
    auto_ssl:set("ca", "https://acme-staging.api.letsencrypt.org/directory")
    ngx.log(ngx.WARN, "Using with staging acme ca")
  end

  auto_ssl:set("request_domain", function(ssl, ssl_options)
    local domain, err = ssl.server_name()
    if not err and domain then
      for wildcard, pems in pairs(wildcards) do
        if string.sub(domain, -string.len(wildcard)) == wildcard then
          ssl_options.privkey_der = pems.key
          ssl_options.fullchain_der = pems.full
        end
      end
    end
    if ngx.shared.upstreams[domain] ~= nil then
      return domain, err
    end

    local addr, addrtyp, addrerr = ssl.raw_server_addr()
    local byte = string.byte
    if not addrerr and addrtyp == "inet" then  -- IPv4
      ssl_options.server_addr = string.format("%d.%d.%d.%d", byte(addr, 1), byte(addr, 2),
                         byte(addr, 3), byte(addr, 4))
    elseif addrtyp == "unix" or addrtyp == "inet6" then  -- UNIX or ipv6
      ngx.log(ngx.ERR, "only ipv4 supported here")
      err = addrerr
    end

    local http = require "resty.http"
    local httpc = http.new()
    local upstream = "127.0.0.1:17000"
    local res, err = httpc:request_uri("http://" .. upstream .. "/.well-known/pageboard", {
      method = "GET",
      headers = {
        ["X-Forwarded-By"] = ssl_options.server_addr,
        ["X-Forwarded-Proto"] = "https",
        ["Host"] = domain .. ":" .. ssl_options.port,
        ["Accept"] = "text/plain"
      }
    })
    local ok
    if err ~= nil then
      ok = false
      ngx.log(ngx.ERR, err)
    elseif res.status ~= 200 then
      ok = false
    else
      ok = true
      local xupstream = res.headers["X-Upstream"]
      if xupstream ~= nil then
        upstream = xupstream
      end
    end
    if ok == true then
      ngx.shared.upstreams[domain] = upstream
    end
    return domain, err
  end)

  -- Define a function to determine which SNI domains to automatically handle
  -- and register new certificates for. Defaults to not allowing any domains,
  -- so this must be configured.
  auto_ssl:set("allow_domain", function(domain, autossl, ssl_options)
    -- never consider empty domain or a domain that is actually an IP
    if domain == nil or domain == "" or string.match(domain, "%d+.%d+.%d+.%d+") or string.find(domain, ":", 1, true) then
      ngx.log(ngx.ERR, "allow_domain rejects: "..domain)
      return false
    elseif ngx.shared.upstreams[domain] ~= nil then
      return true
    else
      return false
    end
  end)

  auto_ssl:init()

  prometheus = require("nginx.prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"port", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {})
}

log_by_lua_block {
  metric_requests:inc(1, {ngx.var.server_port, ngx.var.status})
  metric_latency:observe(tonumber(ngx.var.request_time), {})
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

upstream pageboard {
  server 127.0.0.1:17000;
  balancer_by_lua_block {
    local balancer = require "ngx.balancer"
    local upstream = ngx.shared.upstreams[ngx.var.host]
    if upstream == nil then
        upstream = "127.0.0.1:17000"
    end
    local ip, port = upstream:match("(%d+.%d+.%d+.%d+):(%d+)")
    local ok, err = balancer.set_current_peer(ip, port)
    if err ~= nil then
      ngx.log(ngx.ERR, "Fail to balance to:", ip, ":", port)
    end
  }
}

# Internal server running on port 8999 for handling certificate tasks.
server {
  listen 127.0.0.1:17099;

  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}

server {
  listen 17401;
  location / {
    content_by_lua_block {
      prometheus:collect()
    }
  }
}

