lua_package_path './rocks/share/lua/5.1/?.lua;';

lua_shared_dict prometheus_metrics 1024k;

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 10m;
# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OCSP stapling to function.
#
# This example uses Google's DNS server. You may want to use your system's
# default DNS servers, which can be found in /etc/resolv.conf. If your network
# is not IPv6 compatible, you may wish to disable IPv6 results by using the
# "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
resolver 127.0.0.1 ipv6=off;

# reasonable limits
limit_req_zone $binary_remote_addr zone=ratePerIP:10m rate=1r/s;
limit_req_zone $host zone=ratePerHost:10m rate=100r/s;
limit_req_status 429;

# configured upstreams
lua_shared_dict pageboardDomains 1024k;

# Initial setup tasks.
init_by_lua_block {
  upcache = require "upcache"
  auto_ssl = (require "resty.auto-ssl").new()
  wildcards = (require "wildcards").init("./nginx/ssl/cert/")

  local devel = false
  if wildcards["localhost.localdomain"] ~= nil then
    devel = true
    ngx.log(ngx.WARN, "Using localhost.localdomain, clean with chrome://net-internals/#hsts")
  end

  auto_ssl:set("ocsp_stapling_error_level", ngx.WARN)

  auto_ssl:set("hook_server_port", 17099)
  auto_ssl:set("dir", (require "lfs").currentdir() .. "/autossl")
  if devel then
    auto_ssl:set("ca", "https://acme-staging.api.letsencrypt.org/directory")
    ngx.log(ngx.WARN, "Using with staging acme ca")
  end

  auto_ssl:set("request_domain", function(ssl, ssl_options)
    local domain, err = ssl.server_name()
    if not err and domain ~= nil then
      for wildcard, pem in pairs(wildcards) do
        if domain:sub(-wildcard:len()) == wildcard then
          ssl_options.privkey_der = pem.key
          ssl_options.fullchain_der = pem.full
        end
      end
    end
    return domain, err
  end)

  -- Define a function to determine which SNI domains to automatically handle
  -- and register new certificates for. Defaults to not allowing any domains,
  -- so this must be configured.
  auto_ssl:set("allow_domain", function(domain, autossl, ssl_options)
    -- never consider empty domain or a domain that is actually an IP
    if domain == nil or domain == "" or domain:match("%d+.%d+.%d+.%d+") or domain:find(":", 1, true) then
      ngx.log(ngx.ERR, "allow_domain rejects: " .. domain)
      return false
    elseif ngx.shared.pageboardDomains:get(domain) ~= nil then
      return true
    else
      return false
    end
  end)

  auto_ssl:init()

  prometheus = require("nginx.prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {})
}

log_by_lua_block {
  metric_requests:inc(1, {ngx.var.host, ngx.var.status})
  metric_latency:observe(tonumber(ngx.var.request_time), {})
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
  if ngx.worker.id() ~= 0 then
    return
  end

  local http = require "resty.http"
  local json = require "cjson.safe"
  local function pageboardSync()
    local httpc = http.new()
    -- TODO get upstream address using
    -- https://github.com/openresty/lua-upstream-nginx-module
    local upstream = "127.0.0.1:17007"
    local url = "http://" .. upstream .. "/.well-known/pageboard"
    local res, err = httpc:request_uri(url, {
      method = "GET"
    })
    local delay = 60
    if err ~= nil then
      delay = 1
    elseif res.status ~= 200 then
      ngx.log(ngx.ERR, res.status, " ", url)
      delay = 3
    else
      local body = json.decode(res.body)
      local pbmap = ngx.shared.pageboardDomains
      pbmap:flush_all()
      for key, val in pairs(body.domains) do
        if key:find(".", 1, true) == nil then
          for wildcard in pairs(wildcards) do
            pbmap:set(key .. "." .. wildcard, val)
          end
        else
          pbmap:set(key, val)
        end
      end
    end
    local ok, err = ngx.timer.at(delay, pageboardSync)
    if not ok then
      ngx.log(ngx.ERR, "failed to create the timer: ", err)
    end
  end

  local ok, err = ngx.timer.at(0, pageboardSync)
  if not ok then
    ngx.log(ngx.ERR, "failed to create the timer: ", err)
  end
}

# Internal server running on port 8999 for handling certificate tasks.
server {
  listen 127.0.0.1:17099;

  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}

server {
  listen 17401;
  location / {
    content_by_lua_block {
      prometheus:collect()
    }
  }
}

