include server.d/upcache-redis.conf;

include server.d/bypasses[.]conf;

location @notget {
  limit_req zone=perip burst=5 nodelay;
  limit_req zone=perhost burst=20;

  set $req_body '';
  set $req_jwt '';
  log_by_lua_block {
    local vars = ngx.var
    if vars.upstream_error then
      -- ngx.req.read_body() -- does not work but i though it should have been called
      vars.req_body = ngx.req.get_body_data()
      vars.req_jwt = upcache.jwt(vars, ngx)
    end
  }
  access_log logs/upstream.log upstream if=$upstream_error;

  include location.d/upcache.conf;
  include location.d/proxy.conf;
  proxy_set_header X-Forwarded-By $server_addr;
  proxy_set_header Host $http_host;
  proxy_pass http://application;
}

location /@internal/ {
  internal;
  more_set_headers "X-Upcache-Tag: $upstream_http_x_upcache_tag";
  more_set_headers "X-Upcache-Map: $upstream_http_x_upcache_map";
  more_set_headers "Cache-Control: $upstream_http_cache_control";
  alias /;
}

location @get {
  # move this to access by lua below using lua limit module
  limit_req zone=readers burst=200;

  include location.d/upcache.conf;
  include location.d/proxy.conf;
  proxy_set_header X-Forwarded-By $server_addr;
  proxy_set_header Host $http_host;
  proxy_pass http://application;
}

location @all {
  include location.d/errors.conf;
  error_page 555 = @notget;
  error_page 554 = @get;
  set $tenant '';

  access_by_lua_block {
    local vars = ngx.var
    local httpHost = vars.http_host
    local host = vars.host
    local uri = vars.uri
    local request_uri = uri .. vars.is_args .. (vars.args or "")
    local method = ngx.req.get_method()
    local notget = method ~= "GET" and method ~= "HEAD"

    local ext = uri:match('%.([^./]+)$')
    if ext == "php" or ext == "cgi" or ext == "htm" then
      return ngx.exit(580)
    end
    if ext ~= nil and notget then
      return ngx.exit(580)
    end

    if host == vars.server_addr then
      return ngx.exit(573)
    end

    if uri:match('^/[@.%-~_/a-zA-Z0-9]*$') == nil then
      return ngx.exit(580)
    end

    if uri:match('^/%.well%-known/statics/.+$') then
      return
    end

    local status = ngx.shared.pageboard_settings:get('status')
    if status ~= 'ready' then
      return ngx.exit(563)
    end

    local redirect = nil
    local port = nil
    local tenant, id, domain = host:match("^([a-z0-9]+)%-([a-z0-9]+)%.([a-z0-9]+%.[a-z]+)$")
    local rootDomain = ngx.shared.pageboard_settings:get('root')
    if domain ~= nil and tenant ~= nil and domain == rootDomain then
      host = id .. "." .. domain
      vars.tenant = host
    else
      vars.tenant = nil
    end
    local to = ngx.shared.pageboard_domains:get(host)
    local toHost = nil

    if to == nil then
      return ngx.exit(574)
    elseif to:sub(1, 1) == "=" then
      port = httpHost:match(":(%d+)")
      toHost = to:sub(2)
      if tenant ~= nil then
        vars.tenant = toHost
      elseif host ~= toHost then
        host = toHost
        local protocol = nil
        if vars.https == "on" then
          protocol = "https"
          if port == 443 then port = nil end
        else
          protocol = "http"
          if port == 80 then port = nil end
        end
        if port ~= nil then port = ":"..port else port = "" end
        return ngx.redirect(protocol .. "://" .. host .. port .. request_uri, 307)
      end
    end
    if request_uri ~= vars.request_uri then
      return ngx.redirect(request_uri, 302)
    end

    if method == "OPTIONS" then
      return ngx.exit(575)
    end
    if notget then
      return ngx.exit(555)
    else
      return ngx.exit(554)
    end
  }
}

location / {
  echo_exec @all;
}
