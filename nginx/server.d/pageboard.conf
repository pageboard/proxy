include server.d/upcache-redis.conf;

location @notget {
  limit_req zone=ratePerIP burst=3;
  limit_req zone=ratePerHost burst=100 nodelay;

  set $req_body '';
  set $req_jwt '';
  log_by_lua_block {
    local vars = ngx.var
    if vars.upstream_error then
      -- ngx.req.read_body() -- does not work but i though it should have been called
      vars.req_body = ngx.req.get_body_data()
      vars.req_jwt = upcache.jwt(vars, ngx)
    end
  }
  access_log logs/upstream.log upstream if=$upstream_error;

  include location.d/upcache.conf;
  include location.d/pageboard.conf;
}

location / {
  include location.d/errors.conf;
  error_page 555 = @notget;

  location /.well-known/upcache {
    header_filter_by_lua_block {
      local peer = ngx.header['X-Pageboard-Peer']
      if peer ~= nil then
        ngx.shared.pageboardDomains:set(ngx.vars.host, peer)
      end
    }
  }

  access_by_lua_block {
    local vars = ngx.var
    local httpHost = vars.http_host
    local host = vars.host
    local uri = vars.uri

    local ext = uri:match('%.([^.]+)$')
    if ext == "php" or ext == "xml" or ext == "cgi" or ext == "htm" then
      return ngx.exit(580)
    end

    if host == vars.server_addr then
      return ngx.exit(573)
    end

    if uri:match('^/[@.%-_/a-zA-Z0-9]*$') == nil then
      return ngx.exit(580)
    end

    local redirect = nil
    local port = nil
    local to = ngx.shared.pageboardDomains:get(host)

    local reqUri = vars.request_uri
    local reqQuery = vars.query_string
    if reqQuery ~= nil then reqQuery = '?' .. reqQuery else reqQuery = '' end
    if reqUri ~= (uri .. reqQuery) then
      redirect = uri .. reqQuery
      host = httpHost
    end

    if to == nil then
      if vars.uri:match('^/%.well%-known/statics/.+$') then return end
      return ngx.exit(574)
    elseif to:sub(1, 1) == "=" then
      port = httpHost:match(":(%d+)")
      host = to:sub(2)
      redirect = reqUri
    end
    if redirect ~= nil then
      local protocol = nil
      if vars.https == "on" then
        protocol = "https"
        if port == 443 then port = nil end
      else
        protocol = "http"
        if port == 80 then port = nil end
      end
      if port ~= nil then port = ":"..port else port = "" end
      return ngx.redirect(protocol .. "://" .. host .. port .. redirect)
    end
    local method = ngx.req.get_method()
    if method == "OPTIONS" then
      return ngx.exit(575)
    end
    if method ~= "GET" and method ~= "HEAD" then
      return ngx.exit(555)
    end
  }

  include location.d/upcache.conf;
  include location.d/pageboard.conf;

}

